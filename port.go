package churn

// Port is a one-way communication channel presented by a node
//
// Ports come in two basic flavours, in and out:
// - out ports generate data that can move through the graph
// - in ports respond to data generated by output ports
type Port struct {
	Name string

	PortCore
}

// PortCore contains the underlying business logic
// of a port, and is either an In- or OutPortCore.
//
// Not all methods apply to all cores, and the underlying
// type of the core may need to be understood in order to
// avoid run-time panics.
type PortCore interface {
	AddReceiver(*Port) error
	close()
}

// PortSlice provides helper methods for working with
// slices of ports
type PortSlice []*Port

// FindByName returns the first port in this slice with the given
// name, or nil if no port has such a name
func (p PortSlice) FindByName(name string) *Port {

	for _, port := range p {
		if name == port.Name {
			return port
		}
	}
	return nil

}
